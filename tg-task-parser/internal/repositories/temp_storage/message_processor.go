package temp_storage

import (
	"context"
	"fmt"
	"log/slog"
	"strings"
	"time"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/corray333/tg-task-parser/internal/entities/message"
	"github.com/corray333/tg-task-parser/pkg/tg"
	"github.com/google/uuid"
)

// MessageProcessor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
type MessageProcessor struct {
	storage *TempStorage
	bot     *gotgbot.Bot
}

// NewMessageProcessor —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
func NewMessageProcessor(bot *gotgbot.Bot) *MessageProcessor {
	return &MessageProcessor{
		storage: NewTempStorage(),
		bot:     bot,
	}
}

// ProcessMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (mp *MessageProcessor) ProcessMessage(ctx context.Context, senderID, chatID int64, text string) error {
	// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
	msgID := fmt.Sprintf("%d_%d_%d", senderID, chatID, time.Now().UnixNano())

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	msg := &PendingMessage{
		ID:        msgID,
		SenderID:  senderID,
		Text:      text,
		ChatID:    chatID,
		Timestamp: time.Now(),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	mp.storage.StorePendingMessage(msg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
	go mp.processAfterDelay(ctx, senderID, chatID, msg.Timestamp)

	return nil
}

// processAfterDelay –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
func (mp *MessageProcessor) processAfterDelay(ctx context.Context, senderID, chatID int64, timestamp time.Time) {
	// –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
	time.Sleep(2 * time.Second)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è + 2 —Å–µ–∫—É–Ω–¥—ã)
	fromTime := timestamp
	toTime := timestamp.Add(2 * time.Second)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
	messages := mp.storage.GetAndRemoveMessagesBySender(senderID, fromTime, toTime)

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥—Ä—É–≥–∏–º —Ç–∞–π–º–µ—Ä–æ–º), –∑–∞–≤–µ—Ä—à–∞–µ–º
	if len(messages) == 0 {
		return
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
	combinedText := mp.combineMessages(messages)

	if !strings.Contains(combinedText, string(message.HashtagTask)) {
		return
	}

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	combinedMsg := &CombinedMessage{
		ID:           uuid.New(),
		SenderID:     senderID,
		ChatID:       chatID,
		CombinedText: combinedText,
		CreatedAt:    time.Now(),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	mp.storage.StoreCombinedMessage(combinedMsg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	if err := mp.sendMessageWithButtons(ctx, chatID, combinedText, combinedMsg.ID); err != nil {
		slog.Error("Failed to send message with buttons", "error", err)
	}
}

// combineMessages –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
func (mp *MessageProcessor) combineMessages(messages []*PendingMessage) string {
	var texts []string
	for _, msg := range messages {
		texts = append(texts, msg.Text)
	}
	return strings.Join(texts, "\n")
}

// sendMessageWithButtons –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
func (mp *MessageProcessor) sendMessageWithButtons(ctx context.Context, chatID int64, text string, combinedMsgID uuid.UUID) error {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
	keyboard := gotgbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]gotgbot.InlineKeyboardButton{
			{
				{
					Text:         "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
					CallbackData: fmt.Sprintf("accept_%s", combinedMsgID.String()),
				},
				{
					Text:         "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
					CallbackData: fmt.Sprintf("reject_%s", combinedMsgID.String()),
				},
			},
		},
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	messageText := fmt.Sprintf("üìù **–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n\n%s\n\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", tg.EscapeMarkdownV2(text))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err := mp.bot.SendMessage(chatID, messageText, &gotgbot.SendMessageOpts{
		ParseMode:   gotgbot.ParseModeMarkdownV2,
		ReplyMarkup: keyboard,
	})

	return err
}

// AcceptMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (mp *MessageProcessor) AcceptMessage(ctx context.Context, combinedMsgID uuid.UUID) (*CombinedMessage, error) {
	// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	combinedMsg, exists := mp.storage.GetCombinedMessage(combinedMsgID)
	if !exists {
		return nil, fmt.Errorf("combined message not found")
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	mp.storage.RemoveCombinedMessage(combinedMsgID)

	return combinedMsg, nil
}

// RejectMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (mp *MessageProcessor) RejectMessage(ctx context.Context, combinedMsgID uuid.UUID) error {
	// –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	mp.storage.RemoveCombinedMessage(combinedMsgID)
	return nil
}

// GetStorage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
func (mp *MessageProcessor) GetStorage() *TempStorage {
	return mp.storage
}
