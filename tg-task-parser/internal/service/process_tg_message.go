package service

import (
	"context"
	"fmt"
	"log/slog"
	"strings"
	"time"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/corray333/tg-task-parser/internal/entities/message"
	"github.com/corray333/tg-task-parser/internal/repositories/temp_storage"
	"github.com/corray333/tg-task-parser/pkg/tg"
	"github.com/google/uuid"
)

// ProcessTgMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram
func (s *Service) ProcessTgMessage(ctx context.Context, msg *gotgbot.Message) error {
	if msg == nil {
		return nil
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	senderID := msg.From.Id

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	text := msg.Text

	// –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
	if text == "" && msg.Caption != "" {
		text = msg.Caption
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
	var images []temp_storage.ImageInfo

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
	if len(msg.Photo) > 0 {
		// –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
		largestPhoto := msg.Photo[len(msg.Photo)-1]
		images = append(images, temp_storage.ImageInfo{
			FileID:       largestPhoto.FileId,
			FileUniqueID: largestPhoto.FileUniqueId,
			Width:        int(largestPhoto.Width),
			Height:       int(largestPhoto.Height),
		})
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Ç–µ–∫—Å—Ç—É –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	if msg.ReplyToMessage != nil {
		replyText := msg.ReplyToMessage.Text
		if replyText == "" && msg.ReplyToMessage.Caption != "" {
			replyText = msg.ReplyToMessage.Caption
		}
		text += "\n\n" + strings.ReplaceAll(replyText, "#"+string(message.HashtagTask), "")

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ replied —Å–æ–æ–±—â–µ–Ω–∏—è
		if len(msg.ReplyToMessage.Photo) > 0 {
			largestReplyPhoto := msg.ReplyToMessage.Photo[len(msg.ReplyToMessage.Photo)-1]
			images = append(images, temp_storage.ImageInfo{
				FileID:       largestReplyPhoto.FileId,
				FileUniqueID: largestReplyPhoto.FileUniqueId,
				Width:        int(largestReplyPhoto.Width),
				Height:       int(largestReplyPhoto.Height),
			})
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π
	return s.processMessage(ctx, senderID, msg.Chat.Id, text, images)
}

// processMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
func (s *Service) processMessage(ctx context.Context, senderID, chatID int64, text string, images []temp_storage.ImageInfo) error {
	// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
	msgID := fmt.Sprintf("%d_%d_%d", senderID, chatID, time.Now().UnixNano())

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	msg := &temp_storage.PendingMessage{
		ID:        msgID,
		SenderID:  senderID,
		Text:      text,
		ChatID:    chatID,
		Timestamp: time.Now(),
		Images:    images,
	}

	slog.Info("Received message", "message", msg)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	s.tempStorageRepo.StorePendingMessage(msg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π
	go s.processAfterDelay(ctx, senderID, chatID, msg.Timestamp)

	return nil
}

// processAfterDelay –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
func (s *Service) processAfterDelay(ctx context.Context, senderID, chatID int64, timestamp time.Time) {
	// –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
	time.Sleep(2 * time.Second)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è + 2 —Å–µ–∫—É–Ω–¥—ã)
	fromTime := timestamp
	toTime := timestamp.Add(2 * time.Second)

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	messages := s.tempStorageRepo.GetMessagesBySender(senderID, fromTime, toTime)

	slog.Info("Processing messages", "messages", messages)

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥—Ä—É–≥–∏–º —Ç–∞–π–º–µ—Ä–æ–º), –∑–∞–≤–µ—Ä—à–∞–µ–º
	if len(messages) == 0 {
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	s.tempStorageRepo.RemoveMessagesBySender(senderID, fromTime, toTime)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	combinedText, allImages := s.combineMessagesWithImages(messages)

	if !strings.Contains(combinedText, "#"+string(message.HashtagTask)) {
		return
	}

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	combinedMsg := &temp_storage.CombinedMessage{
		ID:           uuid.New(),
		SenderID:     senderID,
		ChatID:       chatID,
		CombinedText: combinedText,
		Images:       allImages,
		CreatedAt:    time.Now(),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	s.tempStorageRepo.StoreCombinedMessage(combinedMsg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π
	if err := s.sendMessageWithButtons(ctx, chatID, combinedText, combinedMsg.ID); err != nil {
		slog.Error("Failed to send message with buttons", "error", err)
	}
}

// combineMessagesWithImages –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (s *Service) combineMessagesWithImages(messages []*temp_storage.PendingMessage) (string, []temp_storage.ImageInfo) {
	var texts []string
	var allImages []temp_storage.ImageInfo

	for _, msg := range messages {
		texts = append(texts, msg.Text)
		allImages = append(allImages, msg.Images...)
	}

	return strings.Join(texts, "\n"), allImages
}

// sendMessageWithButtons –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
func (s *Service) sendMessageWithButtons(ctx context.Context, chatID int64, text string, combinedMsgID uuid.UUID) error {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
	keyboard := gotgbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]gotgbot.InlineKeyboardButton{
			{
				{
					Text:         "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
					CallbackData: fmt.Sprintf("accept|%s", combinedMsgID.String()),
				},
				{
					Text:         "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
					CallbackData: fmt.Sprintf("reject|%s", combinedMsgID.String()),
				},
			},
		},
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
	escapedText := tg.EscapeMarkdownV2(text)
	lines := strings.Split(escapedText, "\n")
	quotedLines := make([]string, len(lines))
	for i, line := range lines {
		quotedLines[i] = ">" + line
	}
	quotedText := strings.Join(quotedLines, "\n")
	messageText := fmt.Sprintf("üìù **–ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n%s\n\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", quotedText)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Telegram
	return s.tgButtonSender.SendMessageWithButtons(chatID, messageText, keyboard)
}

// AcceptMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (s *Service) AcceptMessage(ctx context.Context, combinedMsgID uuid.UUID) (*temp_storage.CombinedMessage, error) {
	// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	combinedMsg, exists := s.tempStorageRepo.GetCombinedMessage(combinedMsgID)
	if !exists {
		return nil, fmt.Errorf("combined message not found")
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	s.tempStorageRepo.RemoveCombinedMessage(combinedMsgID)

	return combinedMsg, nil
}

// RejectMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (s *Service) RejectMessage(ctx context.Context, combinedMsgID uuid.UUID) error {
	// –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	s.tempStorageRepo.RemoveCombinedMessage(combinedMsgID)
	return nil
}
